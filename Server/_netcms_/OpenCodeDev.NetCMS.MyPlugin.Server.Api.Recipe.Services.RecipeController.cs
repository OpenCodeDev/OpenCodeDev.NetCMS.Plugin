/*
-- GENERATED BY NetCMS-Cli v0.1.0 BUILD 1200 -- 
Created on 7/21/2021 9:56:29 PM
Repos CLI: https://github.com/OpenCodeDev/OpenCodeDev.NetCMS.Compiler
License: MIT
Author: Max Samson
Company: OpenCodeDev
*/


using ProtoBuf.Grpc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Grpc.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;

// Shared Resources
using OpenCodeDev.NetCms.Shared.Api.Recipe.Controllers;
using OpenCodeDev.NetCms.Shared.Api.Recipe.Models;
using OpenCodeDev.NetCms.Shared.Api.Recipe.Messages;

// Server Resources
using OpenCodeDev.NetCMS.MyPlugin.Server.Database;
using OpenCodeDev.NetCMS.MyPlugin.Server.Api.Recipe.Services;
using OpenCodeDev.NetCMS.MyPlugin.Server.Api.Recipe.Models;

// NetCMS Core Sever
using OpenCodeDev.NetCMS.Core.Server.Extensions;

namespace OpenCodeDev.NetCMS.MyPlugin.Server.Api.Recipe.Controllers
{   
    /// <summary>
    /// This class provides you with fully functional common api CRUD logic.<br/>
    /// You can also inherit this class and override the logic to use your own custom logic. (Not Recommended)
    /// </summary>
    public class RecipeController
    {
        public virtual async Task<RecipePublicModel> Create(RecipeCreateRequest request, CallContext context = default)
        {         
            var provider = context.ServerCallContext.GetHttpContext().RequestServices;
            var db = provider.GetRequiredService<ApiDatabase>();
            var newEntry = new RecipeModel() { 
              Name = request.Name,
Duration = request.Duration
            };
            db.Add(newEntry);
            await db.SaveChangesAsync();
            return newEntry;
        }

        public virtual async Task<RecipePublicModel> Delete(RecipeDeleteRequest request, CallContext context = default)
        {
            var provider = context.ServerCallContext.GetHttpContext().RequestServices;
            var db = provider.GetRequiredService<ApiDatabase>();
            var result = db.Recipe.Where(p => p.Id.Equals(request.Id)).FirstOrDefault();
            if (result != null) { db.Recipe.Remove(result); }
            else{
                throw new RpcException(new Status(StatusCode.NotFound, "Cannot delete because entry wasn't found."));
            }            
            await db.SaveChangesAsync();
            return result;
        }

        public virtual  async Task<List<RecipePublicModel>> Fetch(RecipeFetchRequest request, CallContext context = default)
        {
            var provider = context.ServerCallContext.GetHttpContext().RequestServices;
            var db = provider.GetRequiredService<ApiDatabase>();

            var result = db.Recipe
            .WhereConditionsMet(request.Conditions)
            .OrderByMatching(request.OrderBy)
            .Take(request.Limit).Select(p=>(RecipePublicModel)p).ToList();

            return result;
        }

        public virtual async Task<RecipePublicModel> FetchOne(RecipeFetchOneRequest request, CallContext context = default)
        {
            var provider = context.ServerCallContext.GetHttpContext().RequestServices;
            var db = provider.GetRequiredService<ApiDatabase>();
            var result = db.Recipe.Where(p => p.Id.Equals(request.Id)).FirstOrDefault();
            if (result == null)
            {
                throw new RpcException(new Status(StatusCode.NotFound, $"Cannot find {request.Id} because entry wasn't found."));
            }
            return result;
        }

        public virtual async Task<RecipePublicModel> Update(RecipeUpdateOneRequest request, CallContext context = default)
        {
            var provider = context.ServerCallContext.GetHttpContext().RequestServices;
            var db = provider.GetRequiredService<ApiDatabase>();
            var myService = provider.GetRequiredService<RecipeMyService>();
            var updating = db.Recipe.Where(p => p.Id.Equals(request.Id)).FirstOrDefault();
            if(updating == null){
                throw new RpcException(new Status(StatusCode.NotFound, $"Cannot update {request.Id} because entry wasn't found."));
            }
            updating.Name = request.Name;
updating.Duration = request.Duration;
            // updating = myService.FilterUpdateReferences(db, updating, request);
            db.Recipe.Add(updating);
            await db.SaveChangesAsync();
            return (RecipePublicModel)updating;
        }
    }
}
